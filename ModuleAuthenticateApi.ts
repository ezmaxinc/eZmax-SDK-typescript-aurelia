/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.45
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AuthenticateAuthenticateV2Request,
  AuthenticateAuthenticateV2Response,
} from './models';

/**
 * authenticateAuthenticateV2 - parameters interface
 */
export interface IAuthenticateAuthenticateV2Params {
  eSessionType: 'ezsignuser';
  authenticateAuthenticateV2Request: AuthenticateAuthenticateV2Request;
}

/**
 * ModuleAuthenticateApi - API class
 */
@autoinject()
export class ModuleAuthenticateApi extends Api {

  /**
   * Creates a new ModuleAuthenticateApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Authenticate a user
   * This endpoint authenticates a user.
   * @param params.eSessionType 
   * @param params.authenticateAuthenticateV2Request 
   */
  async authenticateAuthenticateV2(params: IAuthenticateAuthenticateV2Params): Promise<AuthenticateAuthenticateV2Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('authenticateAuthenticateV2', params, 'eSessionType');
    this.ensureParamIsSet('authenticateAuthenticateV2', params, 'authenticateAuthenticateV2Request');

    // Create URL to call
    const url = `${this.basePath}/2/module/authenticate/authenticate/ezsignuser/{eSessionType}`
      .replace(`{${'eSessionType'}}`, encodeURIComponent(`${params['eSessionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['authenticateAuthenticateV2Request'] || {}))

      // Authentication 'Authorization' required
      .withHeader('Authorization', this.authStorage.getAuthorization())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

