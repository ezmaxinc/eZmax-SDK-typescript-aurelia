/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.44
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Response for the /1/object/activesession/getCurrent API Request
 */
export interface ActivesessionGetCurrentV1Response {
  mPayload: ActivesessionGetCurrentV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/activesession/getCurrent API Request
 */
export interface ActivesessionGetCurrentV1ResponseMPayload {
  /**
   * The customer code specific to the client in which the API request is being made
   */
  sCustomerCode: string;
  /**
   * The type of session used for the API request call
   */
  eActivesessionSessiontype: ActivesessionGetCurrentV1ResponseMPayloadEActivesessionSessiontypeEnum;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The name of the active Company in the current language
   */
  sCompanyNameX: string;
  /**
   * The name of the active Department in the current language
   */
  sDepartmentNameX: string;
  /**
   * An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
   */
  a_RegisteredModules: Array<string>;
  /**
   * An array of permissions granted to the user or api key
   */
  a_Permissions: Array<number>;
  /**
   * The unique ID of the User
   */
  fkiUserID: number;
  /**
   * The unique ID of the Apikey
   */
  fkiApikeyID: number;
}

/**
 * Enum for the eActivesessionSessiontype property.
 */
export type ActivesessionGetCurrentV1ResponseMPayloadEActivesessionSessiontypeEnum = 'Normal';


/**
 * An Address Object
 */
export interface AddressRequest {
  /**
   * The unique ID of the Addresstype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Real Estate Invoice| |4|Invoicing| |5|Shipping|
   */
  fkiAddresstypeID: number;
  /**
   * The Civic number.
   */
  sAddressCivic: string;
  /**
   * The Street Name
   */
  sAddressStreet: string;
  /**
   * The Suite or appartment number
   */
  sAddressSuite: string;
  /**
   * The City name
   */
  sAddressCity: string;
  /**
   * The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming|
   */
  fkiProvinceID: number;
  /**
   * The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|
   */
  fkiCountryID: number;
  /**
   * The Postal/Zip Code  The value must be entered without spaces
   */
  sAddressZip: string;
}


/**
 * Request for the /1/object/apikey/createObject API Request
 */
export interface ApikeyCreateObjectV1Request {
  objApikey?: ApikeyRequest;
  objApikeyCompound?: ApikeyRequestCompound;
}


/**
 * Response for the /1/object/apikey/createObject API Request
 */
export interface ApikeyCreateObjectV1Response {
  mPayload: ApikeyCreateObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/apikey/createObject API Request
 */
export interface ApikeyCreateObjectV1ResponseMPayload {
  a_objApikey: Array<ApikeyResponse>;
}


/**
 * An Apikey Object
 */
export interface ApikeyRequest {
  /**
   * The unique ID of the User
   */
  fkiUserID: number;
  objApikeyDescription: MultilingualApikeyDescription;
}


/**
 * An Apikey Object and children to create a complete structure
 */
export interface ApikeyRequestCompound {
  /**
   * The unique ID of the User
   */
  fkiUserID: number;
  objApikeyDescription: MultilingualApikeyDescription;
}


/**
 * An Apikey Object
 */
export interface ApikeyResponse {
  objApikeyDescription: MultilingualApikeyDescription;
  /**
   * The secret token for the API key.  This will be returned only on creation.
   */
  sComputedToken?: string;
  /**
   * The unique ID of the Apikey
   */
  pkiApikeyID: number;
  objAudit: CommonAudit;
}


/**
 * An Attempt object
 */
export interface AttemptResponse {
  /**
   * Represent a Date Time. The timezone is the one configured in the User\'s profile.
   */
  dtAttemptStart: string;
  /**
   * The Success or Failure message of the attempt when we tried to call the URL to deliver the webhook event.
   */
  sAttemptResult: string;
  /**
   * The number of second it took to process the webhook or get an error
   */
  iAttemptDuration: number;
}


/**
 * Request for the /2/module/authenticate/authenticate API Request
 */
export interface AuthenticateAuthenticateV2Request {
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The email address.
   */
  sEmailAddress?: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname?: string;
  /**
   * A Password.  Must meet complexity requirements
   */
  sPassword?: string;
  /**
   * A Password encrypted and encoded in Base64  Must meet complexity requirements
   */
  sPasswordEncrypted?: string;
}


/**
 * Response for the /2/module/authenticate/authenticate API Request
 */
export interface AuthenticateAuthenticateV2Response {
  mPayload: AuthenticateAuthenticateV2ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /2/module/authenticate/authenticate API Request
 */
export interface AuthenticateAuthenticateV2ResponseMPayload {
  /**
   * The Authorization key
   */
  sAuthorization: string;
  /**
   * The secret key
   */
  sSecret: string;
}


/**
 * Gives informations about the user that created the object and the last user to have modified it.  If the object was never modified after creation, both Created and Modified informations will be the same.  Apikey details will only be provided if the changes were made by an API key.  
 */
export interface CommonAudit {
  /**
   * The unique ID of the User
   */
  fkiUserIDCreated: number;
  /**
   * The unique ID of the User
   */
  fkiUserIDModified: number;
  /**
   * The unique ID of the Apikey
   */
  fkiApikeyIDCreated?: number;
  /**
   * The unique ID of the Apikey
   */
  fkiApikeyIDModified?: number;
  /**
   * Represent a Date Time. The timezone is the one configured in the User\'s profile.
   */
  dtCreatedDate: string;
  /**
   * Represent a Date Time. The timezone is the one configured in the User\'s profile.
   */
  dtModifiedDate: string;
}


/**
 * Response for the /1/object/xxx/getAutocomplete API Request
 */
export interface CommonGetAutocompleteV1Response {
  mPayload: Array<CommonGetAutocompleteV1ResponseMPayload>;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Generic Autocomplete Response
 */
export interface CommonGetAutocompleteV1ResponseMPayload {
  /**
   * The Category (ie group) for the dropdown or an empty string if not categorized
   */
  group: string;
  /**
   * The Unique ID of the element
   */
  id: string;
  /**
   * The Description of the element
   */
  option: string;
}


/**
 * All API response will inherit this based Response
 */
export interface CommonResponse {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Generic Error Message
 */
export interface CommonResponseError {
  /**
   * More detail about the error
   */
  sErrorMessage: string;
  /**
   * The error code. See documentation for valid values
   */
  eErrorCode?: string;
}


/**
 * This is a generic debug object that is returned by all API requests
 */
export interface CommonResponseObjDebug {
  /**
   * The peak memory allocated during the API request execution. Formatted as a human readable string
   */
  sMemoryUsage: string;
  /**
   * The total server execution time of the API request execution. Formatted as a human readable string
   */
  sRunTime: string;
  /**
   * The number of SQL SELECT queries that were sent to the database server during the API request execution
   */
  iSQLSelects: number;
  /**
   * The number of SQL INSERT/UPDATE/DELETE queries that were sent to the database server during the API request execution
   */
  iSQLQueries: number;
  /**
   * An array of the SQL Queries that were executed during the API request execution
   */
  a_objSQLQuery: Array<CommonResponseObjSQLQuery>;
}


/**
 * This is a debug object containing debugging information on the actual function
 */
export interface CommonResponseObjDebugPayload {
  /**
   * The minimum version of the function that can be called
   */
  iVersionMin: number;
  /**
   * The maximum version of the function that can be called
   */
  iVersionMax: number;
  /**
   * An array of permissions required to access this function.  If the value \"0\" is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don\'t need to have all of them.
   */
  a_RequiredPermissions: Array<number>;
}


/**
 * Definition of objSQLQuery Object
 */
export interface CommonResponseObjSQLQuery {
  /**
   * The SQL Query
   */
  sQuery: string;
  /**
   * Execution time of the SQL Query in seconds
   */
  fDuration: number;
}


/**
 * This is the base Webhook object
 */
export interface CommonWebhook {
  objWebhook: WebhookResponse;
  /**
   * An array containing details of previous attempts that were made to deliver the message. The array is empty if it\'s the first attempt.
   */
  a_objAttempt: Array<AttemptResponse>;
}


/**
 * A Contact Object
 */
export interface ContactRequest {
  /**
   * The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|
   */
  fkiContacttitleID: number;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The First name of the contact
   */
  sContactFirstname: string;
  /**
   * The Last name of the contact
   */
  sContactLastname: string;
  /**
   * The Company name of the contact
   */
  sContactCompany: string;
  /**
   * The Birth Date of the contact
   */
  dtContactBirthdate?: string;
}


/**
 * A Contact Object and children to create a complete structure
 */
export interface ContactRequestCompound {
  objContactinformations: ContactinformationsRequestCompound;
  /**
   * The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|
   */
  fkiContacttitleID: number;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The First name of the contact
   */
  sContactFirstname: string;
  /**
   * The Last name of the contact
   */
  sContactLastname: string;
  /**
   * The Company name of the contact
   */
  sContactCompany: string;
  /**
   * The Birth Date of the contact
   */
  dtContactBirthdate?: string;
}


export interface ContactRequestCompoundAllOf {
  objContactinformations: ContactinformationsRequestCompound;
}


/**
 * A Contactinformations Object
 */
export interface ContactinformationsRequest {
  /**
   * The index in the a_objAddress array (zero based index) representing the Address object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iAddressDefault: number;
  /**
   * The index in the a_objPhone array (zero based index) representing the Phone object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iPhoneDefault: number;
  /**
   * The index in the a_objEmail array (zero based index) representing the Email object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iEmailDefault: number;
  /**
   * The index in the a_objWebsite array (zero based index) representing the Website object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iWebsiteDefault: number;
}


/**
 * A Contactinformations Object and children to create a complete structure
 */
export interface ContactinformationsRequestCompound {
  a_objAddress: Array<AddressRequest>;
  a_objPhone: Array<PhoneRequest>;
  a_objEmail: Array<EmailRequest>;
  a_objWebsite: Array<WebsiteRequest>;
  /**
   * The index in the a_objAddress array (zero based index) representing the Address object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iAddressDefault: number;
  /**
   * The index in the a_objPhone array (zero based index) representing the Phone object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iPhoneDefault: number;
  /**
   * The index in the a_objEmail array (zero based index) representing the Email object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iEmailDefault: number;
  /**
   * The index in the a_objWebsite array (zero based index) representing the Website object that should become the default one.  You can leave the value to 0 if the array is empty.
   */
  iWebsiteDefault: number;
}


/**
 * A Contact Object
 */
export interface EmailRequest {
  /**
   * The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|
   */
  fkiEmailtypeID: number;
  /**
   * The email address.
   */
  sEmailAddress: string;
}


/**
 * Request for the /1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate API Request
 */
export interface EzsigndocumentApplyEzsigntemplateV1Request {
  /**
   * The unique ID of the Ezsigndocument
   */
  fkiEzsigntemplateID: number;
  a_sEzsigntemplatesigner: Array<string>;
  a_pkiEzsignfoldersignerassociationID: Array<number>;
}


/**
 * Response for the /1/object/ezsigndocument/{pkiEzsigndocument}/applyEzsigntemplate API Request
 */
export interface EzsigndocumentApplyEzsigntemplateV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Request for the /1/object/ezsigndocument/createObject API Request
 */
export interface EzsigndocumentCreateObjectV1Request {
  objEzsigndocument?: EzsigndocumentRequest;
  objEzsigndocumentCompound?: EzsigndocumentRequestCompound;
}


/**
 * Response for the /1/object/ezsigndocument/createObject API Request
 */
export interface EzsigndocumentCreateObjectV1Response {
  mPayload: EzsigndocumentCreateObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsigndocument/createObject API Request
 */
export interface EzsigndocumentCreateObjectV1ResponseMPayload {
  /**
   * An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
   */
  a_pkiEzsigndocumentID: Array<number>;
}


/**
 * Response for the /1/object/ezsigndocument/deleteObject API Request
 */
export interface EzsigndocumentDeleteObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Response for the /1/object/ezsigndocument/{pkiEzsigndocument}/getDownloadUrl API Request
 */
export interface EzsigndocumentGetDownloadUrlV1Response {
  mPayload: EzsigndocumentGetDownloadUrlV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsigndocument/{pkiEzsigndocument}/getDownloadUrl API Request
 */
export interface EzsigndocumentGetDownloadUrlV1ResponseMPayload {
  /**
   * The Url to the requested document.  Url will expire after 5 minutes.
   */
  sDownloadUrl: string;
}


/**
 * Response for the /1/object/ezsigndocument/getDownloadUrl API Request
 */
export interface EzsigndocumentGetObjectV1Response {
  mPayload: EzsigndocumentGetObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsigndocument/getObject API Request
 */
export interface EzsigndocumentGetObjectV1ResponseMPayload {
  /**
   * The unique ID of the Ezsignfolder
   */
  fkiEzsignfolderID: number;
  /**
   * The maximum date and time at which the document can be signed.
   */
  dtEzsigndocumentDuedate: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The name of the document that will be presented to Ezsignfoldersignerassociations
   */
  sEzsigndocumentName: string;
  /**
   * The unique ID of the Ezsigntemplate
   */
  pkiEzsigndocumentID: number;
  eEzsigndocumentStep: FieldEEzsigndocumentStep;
  /**
   * The date and time when the Ezsigndocument was first sent.
   */
  dtEzsigndocumentFirstsend: string;
  /**
   * The date and time when the Ezsigndocument was sent the last time.
   */
  dtEzsigndocumentLastsend: string;
  /**
   * The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
   */
  iEzsigndocumentOrder: number;
  /**
   * The number of pages in the Ezsigndocument.
   */
  iEzsigndocumentPagetotal: number;
  /**
   * The number of signatures that were signed in the document.
   */
  iEzsigndocumentSignaturesigned: number;
  /**
   * The number of total signatures that were requested in the Ezsigndocument.
   */
  iEzsigndocumentSignaturetotal: number;
  /**
   * MD5 Hash of the initial PDF Document before signatures were applied to it.
   */
  sEzsigndocumentMD5initial: string;
  /**
   * MD5 Hash of the final PDF Document after all signatures were applied to it.
   */
  sEzsigndocumentMD5signed: string;
  objAudit: CommonAudit;
}


/**
 * An Ezsigndocument Object
 */
export interface EzsigndocumentRequest {
  /**
   * Indicates where to look for the document binary content.
   */
  eEzsigndocumentSource: EzsigndocumentRequestEEzsigndocumentSourceEnum;
  /**
   * Indicates the format of the document.
   */
  eEzsigndocumentFormat: EzsigndocumentRequestEEzsigndocumentFormatEnum;
  /**
   * The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource = Base64.
   */
  sEzsigndocumentBase64?: string;
  /**
   * A reference to a valid Ezsignfolder.  That value is returned after a successful Ezsignfolder Creation.
   */
  fkiEzsignfolderID: number;
  /**
   * Represent a Date Time. The timezone is the one configured in the User\'s profile.
   */
  dtEzsigndocumentDuedate: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The name of the document that will be presented to Ezsignfoldersignerassociations
   */
  sEzsigndocumentName: string;
}

/**
 * Enum for the eEzsigndocumentSource property.
 */
export type EzsigndocumentRequestEEzsigndocumentSourceEnum = 'Base64';

/**
 * Enum for the eEzsigndocumentFormat property.
 */
export type EzsigndocumentRequestEEzsigndocumentFormatEnum = 'Pdf';


/**
 * An Ezsigndocument Object and children to create a complete structure
 */
export interface EzsigndocumentRequestCompound {
  /**
   * Indicates where to look for the document binary content.
   */
  eEzsigndocumentSource: EzsigndocumentRequestCompoundEEzsigndocumentSourceEnum;
  /**
   * Indicates the format of the document.
   */
  eEzsigndocumentFormat: EzsigndocumentRequestCompoundEEzsigndocumentFormatEnum;
  /**
   * The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource = Base64.
   */
  sEzsigndocumentBase64?: string;
  /**
   * A reference to a valid Ezsignfolder.  That value is returned after a successful Ezsignfolder Creation.
   */
  fkiEzsignfolderID: number;
  /**
   * Represent a Date Time. The timezone is the one configured in the User\'s profile.
   */
  dtEzsigndocumentDuedate: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The name of the document that will be presented to Ezsignfoldersignerassociations
   */
  sEzsigndocumentName: string;
}

/**
 * Enum for the eEzsigndocumentSource property.
 */
export type EzsigndocumentRequestCompoundEEzsigndocumentSourceEnum = 'Base64';

/**
 * Enum for the eEzsigndocumentFormat property.
 */
export type EzsigndocumentRequestCompoundEEzsigndocumentFormatEnum = 'Pdf';


/**
 * An Ezsigndocument Object
 */
export interface EzsigndocumentResponse {
  /**
   * The unique ID of the Ezsignfolder
   */
  fkiEzsignfolderID: number;
  /**
   * The maximum date and time at which the document can be signed.
   */
  dtEzsigndocumentDuedate: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The name of the document that will be presented to Ezsignfoldersignerassociations
   */
  sEzsigndocumentName: string;
  /**
   * The unique ID of the Ezsigntemplate
   */
  pkiEzsigndocumentID: number;
  eEzsigndocumentStep: FieldEEzsigndocumentStep;
  /**
   * The date and time when the Ezsigndocument was first sent.
   */
  dtEzsigndocumentFirstsend: string;
  /**
   * The date and time when the Ezsigndocument was sent the last time.
   */
  dtEzsigndocumentLastsend: string;
  /**
   * The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
   */
  iEzsigndocumentOrder: number;
  /**
   * The number of pages in the Ezsigndocument.
   */
  iEzsigndocumentPagetotal: number;
  /**
   * The number of signatures that were signed in the document.
   */
  iEzsigndocumentSignaturesigned: number;
  /**
   * The number of total signatures that were requested in the Ezsigndocument.
   */
  iEzsigndocumentSignaturetotal: number;
  /**
   * MD5 Hash of the initial PDF Document before signatures were applied to it.
   */
  sEzsigndocumentMD5initial: string;
  /**
   * MD5 Hash of the final PDF Document after all signatures were applied to it.
   */
  sEzsigndocumentMD5signed: string;
  objAudit: CommonAudit;
}


export interface EzsigndocumentResponseAllOf {
  /**
   * The unique ID of the Ezsignfolder
   */
  fkiEzsignfolderID: number;
  /**
   * The maximum date and time at which the document can be signed.
   */
  dtEzsigndocumentDuedate: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The name of the document that will be presented to Ezsignfoldersignerassociations
   */
  sEzsigndocumentName: string;
  /**
   * The unique ID of the Ezsigntemplate
   */
  pkiEzsigndocumentID: number;
  eEzsigndocumentStep: FieldEEzsigndocumentStep;
  /**
   * The date and time when the Ezsigndocument was first sent.
   */
  dtEzsigndocumentFirstsend: string;
  /**
   * The date and time when the Ezsigndocument was sent the last time.
   */
  dtEzsigndocumentLastsend: string;
  /**
   * The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
   */
  iEzsigndocumentOrder: number;
  /**
   * The number of pages in the Ezsigndocument.
   */
  iEzsigndocumentPagetotal: number;
  /**
   * The number of signatures that were signed in the document.
   */
  iEzsigndocumentSignaturesigned: number;
  /**
   * The number of total signatures that were requested in the Ezsigndocument.
   */
  iEzsigndocumentSignaturetotal: number;
  /**
   * MD5 Hash of the initial PDF Document before signatures were applied to it.
   */
  sEzsigndocumentMD5initial: string;
  /**
   * MD5 Hash of the final PDF Document after all signatures were applied to it.
   */
  sEzsigndocumentMD5signed: string;
  objAudit: CommonAudit;
}


/**
 * An Ezsigndocument Object and children to create a complete structure
 */
export interface EzsigndocumentResponseCompound {
  /**
   * The unique ID of the Ezsignfolder
   */
  fkiEzsignfolderID: number;
  /**
   * The maximum date and time at which the document can be signed.
   */
  dtEzsigndocumentDuedate: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The name of the document that will be presented to Ezsignfoldersignerassociations
   */
  sEzsigndocumentName: string;
  /**
   * The unique ID of the Ezsigntemplate
   */
  pkiEzsigndocumentID: number;
  eEzsigndocumentStep: FieldEEzsigndocumentStep;
  /**
   * The date and time when the Ezsigndocument was first sent.
   */
  dtEzsigndocumentFirstsend: string;
  /**
   * The date and time when the Ezsigndocument was sent the last time.
   */
  dtEzsigndocumentLastsend: string;
  /**
   * The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
   */
  iEzsigndocumentOrder: number;
  /**
   * The number of pages in the Ezsigndocument.
   */
  iEzsigndocumentPagetotal: number;
  /**
   * The number of signatures that were signed in the document.
   */
  iEzsigndocumentSignaturesigned: number;
  /**
   * The number of total signatures that were requested in the Ezsigndocument.
   */
  iEzsigndocumentSignaturetotal: number;
  /**
   * MD5 Hash of the initial PDF Document before signatures were applied to it.
   */
  sEzsigndocumentMD5initial: string;
  /**
   * MD5 Hash of the final PDF Document after all signatures were applied to it.
   */
  sEzsigndocumentMD5signed: string;
  objAudit: CommonAudit;
}


/**
 * Request for the /1/object/ezsignfolder/createObject API Request
 */
export interface EzsignfolderCreateObjectV1Request {
  objEzsignfolder?: EzsignfolderRequest;
  objEzsignfolderCompound?: EzsignfolderRequestCompound;
}


/**
 * Response for the /1/object/ezsignfolder/createObject API Request
 */
export interface EzsignfolderCreateObjectV1Response {
  mPayload: EzsignfolderCreateObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsignfolder/createObject API Request
 */
export interface EzsignfolderCreateObjectV1ResponseMPayload {
  /**
   * An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
   */
  a_pkiEzsignfolderID: Array<number>;
}


/**
 * Response for the /1/object/ezsignfolder/deleteObject API Request
 */
export interface EzsignfolderDeleteObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Response for the /1/object/ezsignfolder/getObject API Request
 */
export interface EzsignfolderGetObjectV1Response {
  mPayload: EzsignfolderGetObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsignfolder/getObject API Request
 */
export interface EzsignfolderGetObjectV1ResponseMPayload {
  /**
   * The unique ID of the Ezsignfoldertype.    This value can be queried by the API and is also visible in the admin interface.    There are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
   */
  fkiEzsignfoldertypeID: number;
  /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   */
  fkiEzsigntsarequirementID: number;
  /**
   * The description of the Ezsign Folder
   */
  sEzsignfolderDescription: string;
  /**
   * Somes extra notes about the eZsign Folder
   */
  tEzsignfolderNote: string;
  eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency;
  /**
   * The unique ID of the Ezsignfolder
   */
  pkiEzsignfolderID: number;
  /**
   * The date and time at which the Ezsign folder was sent the last time.
   */
  dtEzsignfolderSentdate: string;
  eEzsignfolderStep: FieldEEzsignfolderStep;
  /**
   * The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely.
   */
  dtEzsignfolderClose: string;
  objAudit: CommonAudit;
}


/**
 * An Ezsignfolder Object
 */
export interface EzsignfolderRequest {
  /**
   * The unique ID of the Ezsignfoldertype.    This value can be queried by the API and is also visible in the admin interface.    There are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
   */
  fkiEzsignfoldertypeID: number;
  /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   */
  fkiEzsigntsarequirementID: number;
  /**
   * The description of the Ezsign Folder
   */
  sEzsignfolderDescription: string;
  /**
   * Somes extra notes about the eZsign Folder
   */
  tEzsignfolderNote: string;
  eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency;
}


/**
 * An Ezsignfolder Object and children to create a complete structure
 */
export interface EzsignfolderRequestCompound {
  /**
   * An array of signers that will be invited to sign the Ezsigndocuments
   */
  a_Ezsignfoldersignerassociation: Array<EzsignfoldersignerassociationRequest>;
  /**
   * The unique ID of the Ezsignfoldertype.    This value can be queried by the API and is also visible in the admin interface.    There are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
   */
  fkiEzsignfoldertypeID: number;
  /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   */
  fkiEzsigntsarequirementID: number;
  /**
   * The description of the Ezsign Folder
   */
  sEzsignfolderDescription: string;
  /**
   * Somes extra notes about the eZsign Folder
   */
  tEzsignfolderNote: string;
  eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency;
}


/**
 * An Ezsignfolder Object
 */
export interface EzsignfolderResponse {
  /**
   * The unique ID of the Ezsignfoldertype.    This value can be queried by the API and is also visible in the admin interface.    There are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
   */
  fkiEzsignfoldertypeID: number;
  /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   */
  fkiEzsigntsarequirementID: number;
  /**
   * The description of the Ezsign Folder
   */
  sEzsignfolderDescription: string;
  /**
   * Somes extra notes about the eZsign Folder
   */
  tEzsignfolderNote: string;
  eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency;
  /**
   * The unique ID of the Ezsignfolder
   */
  pkiEzsignfolderID: number;
  /**
   * The date and time at which the Ezsign folder was sent the last time.
   */
  dtEzsignfolderSentdate: string;
  eEzsignfolderStep: FieldEEzsignfolderStep;
  /**
   * The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely.
   */
  dtEzsignfolderClose: string;
  objAudit: CommonAudit;
}


export interface EzsignfolderResponseAllOf {
  /**
   * The unique ID of the Ezsignfoldertype.    This value can be queried by the API and is also visible in the admin interface.    There are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
   */
  fkiEzsignfoldertypeID: number;
  /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   */
  fkiEzsigntsarequirementID: number;
  /**
   * The description of the Ezsign Folder
   */
  sEzsignfolderDescription: string;
  /**
   * Somes extra notes about the eZsign Folder
   */
  tEzsignfolderNote: string;
  eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency;
  /**
   * The unique ID of the Ezsignfolder
   */
  pkiEzsignfolderID: number;
  /**
   * The date and time at which the Ezsign folder was sent the last time.
   */
  dtEzsignfolderSentdate: string;
  eEzsignfolderStep: FieldEEzsignfolderStep;
  /**
   * The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely.
   */
  dtEzsignfolderClose: string;
  objAudit: CommonAudit;
}


/**
 * An Ezsignfolder Object and children to create a complete structure
 */
export interface EzsignfolderResponseCompound {
  /**
   * The unique ID of the Ezsignfoldertype.    This value can be queried by the API and is also visible in the admin interface.    There are two types of Ezsignfoldertype. **User** and **Shared**. **User** can only be seen by the user who created the folder or its assistants. Access to **Shared** folders are configurable for access and email delivery. You should typically choose a **Shared** type here.
   */
  fkiEzsignfoldertypeID: number;
  /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server\'s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server\'s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   */
  fkiEzsigntsarequirementID: number;
  /**
   * The description of the Ezsign Folder
   */
  sEzsignfolderDescription: string;
  /**
   * Somes extra notes about the eZsign Folder
   */
  tEzsignfolderNote: string;
  eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency;
  /**
   * The unique ID of the Ezsignfolder
   */
  pkiEzsignfolderID: number;
  /**
   * The date and time at which the Ezsign folder was sent the last time.
   */
  dtEzsignfolderSentdate: string;
  eEzsignfolderStep: FieldEEzsignfolderStep;
  /**
   * The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely.
   */
  dtEzsignfolderClose: string;
  objAudit: CommonAudit;
}


/**
 * Request for the /1/object/ezsignfolder/{pkiEzsignfolderID}/send API Request
 */
export interface EzsignfolderSendV1Request {
  /**
   * A custom text message that will be added to the email sent to signatories inviting them to sign.  You can send an empty string and only the generic message will be sent.
   */
  tExtraMessage: string;
}


/**
 * Response for the /1/object/ezsignfolder/{pkiEzsignfolderID}/send API Request
 */
export interface EzsignfolderSendV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Request for the /1/object/ezsignfoldersignerassociation/createObject API Request
 */
export interface EzsignfoldersignerassociationCreateObjectV1Request {
  objEzsignfoldersignerassociation?: EzsignfoldersignerassociationRequest;
  objEzsignfoldersignerassociationCompound?: EzsignfoldersignerassociationRequestCompound;
}


/**
 * Response for the /1/object/ezsignfoldersignerassociation/createObject API Request
 */
export interface EzsignfoldersignerassociationCreateObjectV1Response {
  mPayload: EzsignfoldersignerassociationCreateObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsignfoldersignerassociation/createObject API Request
 */
export interface EzsignfoldersignerassociationCreateObjectV1ResponseMPayload {
  /**
   * An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
   */
  a_pkiEzsignfoldersignerassociationID: Array<number>;
}


/**
 * Response for the /1/object/ezsignfoldersignerassociation/deleteObject API Request
 */
export interface EzsignfoldersignerassociationDeleteObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Response for the /1/object/ezsignfoldersignerassociation/getInPersonLoginUrl API Request
 */
export interface EzsignfoldersignerassociationGetInPersonLoginUrlV1Response {
  mPayload: EzsignfoldersignerassociationGetInPersonLoginUrlV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsignfoldersignerassociation/getInPersonLoginUrl API Request
 */
export interface EzsignfoldersignerassociationGetInPersonLoginUrlV1ResponseMPayload {
  /**
   * The Url to login to the signing application.    Url will expire after 30 minutes.  
   */
  sLoginUrl: string;
}


/**
 * Response for the /1/object/ezsignfoldersignerassociation/getObject API Request
 */
export interface EzsignfoldersignerassociationGetObjectV1Response {
  /**
   * Payload for the /1/object/ezsignfoldersignerassociation/getObject API Request
   */
  mPayload: object;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * An Ezsignfoldersignerassociation Object
 */
export interface EzsignfoldersignerassociationRequest {
  /**
   * A reference to a valid User.  This is only used if the signatory will be a user from the system.
   */
  fkiUserID?: number;
  /**
   * A reference to a valid Ezsignfolder.  That value is returned after a successful Ezsignfolder Creation.
   */
  fkiEzsignfolderID: number;
}


/**
 * An Ezsignfoldersignerassociation Object and children to create a complete structure
 */
export interface EzsignfoldersignerassociationRequestCompound {
  objEzsignsigner?: EzsignsignerRequestCompound;
  /**
   * A reference to a valid User.  This is only used if the signatory will be a user from the system.
   */
  fkiUserID?: number;
  /**
   * A reference to a valid Ezsignfolder.  That value is returned after a successful Ezsignfolder Creation.
   */
  fkiEzsignfolderID: number;
}


/**
 * Request for the /1/object/ezsignsignature/createObject API Request
 */
export interface EzsignsignatureCreateObjectV1Request {
  objEzsignsignature?: EzsignsignatureRequest;
  objEzsignsignatureCompound?: EzsignsignatureRequestCompound;
}


/**
 * Response for the /1/object/ezsignsignature/createObject API Request
 */
export interface EzsignsignatureCreateObjectV1Response {
  mPayload: EzsignsignatureCreateObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/ezsignsignature/createObject API Request
 */
export interface EzsignsignatureCreateObjectV1ResponseMPayload {
  /**
   * An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
   */
  a_pkiEzsignsignatureID: Array<number>;
}


/**
 * Response for the /1/object/ezsignsignature/deleteObject API Request
 */
export interface EzsignsignatureDeleteObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Response for the /1/object/ezsignsignature/getObject API Request
 */
export interface EzsignsignatureGetObjectV1Response {
  /**
   * Payload for the /1/object/ezsignsignature/getObject API Request
   */
  mPayload: object;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * An Ezsignsignature Object
 */
export interface EzsignsignatureRequest {
  /**
   * The unique ID of the Ezsignfoldersignerassociation
   */
  fkiEzsignfoldersignerassociationID: number;
  /**
   * The page number in the document where to apply the signature
   */
  iEzsignpagePagenumber: number;
  /**
   * The X coordinate (Horizontal) where to put the signature block on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the signature block 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
   */
  iEzsignsignatureX: number;
  /**
   * The Y coordinate (Vertical) where to put the signature block on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the signature block 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
   */
  iEzsignsignatureY: number;
  /**
   * The step when the Ezsignsigner will be invited to sign.
   */
  iEzsignsignatureStep: number;
  eEzsignsignatureType: FieldEEzsignsignatureType;
  /**
   * The unique ID of the Ezsigntemplate
   */
  fkiEzsigndocumentID: number;
}


/**
 * An Ezsignsignature Object and children to create a complete structure
 */
export interface EzsignsignatureRequestCompound {
  /**
   * The unique ID of the Ezsignfoldersignerassociation
   */
  fkiEzsignfoldersignerassociationID: number;
  /**
   * The page number in the document where to apply the signature
   */
  iEzsignpagePagenumber: number;
  /**
   * The X coordinate (Horizontal) where to put the signature block on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the signature block 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
   */
  iEzsignsignatureX: number;
  /**
   * The Y coordinate (Vertical) where to put the signature block on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the signature block 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
   */
  iEzsignsignatureY: number;
  /**
   * The step when the Ezsignsigner will be invited to sign.
   */
  iEzsignsignatureStep: number;
  eEzsignsignatureType: FieldEEzsignsignatureType;
  /**
   * The unique ID of the Ezsigntemplate
   */
  fkiEzsigndocumentID: number;
}


/**
 * An Ezsignsigner Object
 */
export interface EzsignsignerRequest {
  /**
   * The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
   */
  fkiTaxassignmentID: number;
  /**
   * The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father\'s middle name| |15|Your mother\'s maiden name| |16|Name of your eldest child| |17|Your spouse\'s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat\'s name| |22|Date of Birth (YYYY-MM-DD)|
   */
  fkiSecretquestionID?: number;
  /**
   * The method the Ezsignsigner will authenticate to the signing platform.  1. **Password** means the Ezsignsigner will receive a secure link by email. 2. **PasswordPhone** means the Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**. 3. **PasswordQuestion** means the Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer. 4. **InPersonPhone** means the Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**. 5. **InPerson** means the Ezsignsigner will only be able to sign \"In-Person\" and there won\'t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type.
   */
  eEzsignsignerLogintype: EzsignsignerRequestEEzsignsignerLogintypeEnum;
  /**
   * The predefined answer to the secret question the Ezsignsigner will need to provide to successfully authenticate.
   */
  sEzsignsignerSecretanswer?: string;
}

/**
 * Enum for the eEzsignsignerLogintype property.
 */
export type EzsignsignerRequestEEzsignsignerLogintypeEnum = 'Password' | 'PasswordPhone' | 'PasswordQuestion' | 'InPersonPhone' | 'InPerson';


/**
 * An Ezsignsigner Object and children to create a complete structure
 */
export interface EzsignsignerRequestCompound {
  objContact: EzsignsignerRequestCompoundContact;
  /**
   * The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
   */
  fkiTaxassignmentID: number;
  /**
   * The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father\'s middle name| |15|Your mother\'s maiden name| |16|Name of your eldest child| |17|Your spouse\'s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat\'s name| |22|Date of Birth (YYYY-MM-DD)|
   */
  fkiSecretquestionID?: number;
  /**
   * The method the Ezsignsigner will authenticate to the signing platform.  1. **Password** means the Ezsignsigner will receive a secure link by email. 2. **PasswordPhone** means the Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**. 3. **PasswordQuestion** means the Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer. 4. **InPersonPhone** means the Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**. 5. **InPerson** means the Ezsignsigner will only be able to sign \"In-Person\" and there won\'t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type.
   */
  eEzsignsignerLogintype: EzsignsignerRequestCompoundEEzsignsignerLogintypeEnum;
  /**
   * The predefined answer to the secret question the Ezsignsigner will need to provide to successfully authenticate.
   */
  sEzsignsignerSecretanswer?: string;
}

/**
 * Enum for the eEzsignsignerLogintype property.
 */
export type EzsignsignerRequestCompoundEEzsignsignerLogintypeEnum = 'Password' | 'PasswordPhone' | 'PasswordQuestion' | 'InPersonPhone' | 'InPerson';


/**
 * A Ezsignsigner->Contact Object and children to create a complete structure
 */
export interface EzsignsignerRequestCompoundContact {
  /**
   * The first name of the Contact
   */
  sContactFirstname: string;
  /**
   * The last name of the Contact
   */
  sContactLastname: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The email address of the contact. Must be filled if email authentification was requested
   */
  sEmailAddress?: string;
  /**
   * The Phone number of the contact. Use format \"5149901516\" for North American Numbers (Without \"1\" for long distance code) you would dial like this: 1-514-990-1516. Use format \"498945233886\" for international numbers (Without \"011\") you would dial like this: +49 89 452 33 88-6. In this example \"49\" is the country code of Germany.
   */
  sPhoneNumber?: string;
  /**
   * The Cell Phone number of the contact. Use format \"5149901516\" for North American Numbers (Without \"1\" for long distance code) you would dial like this: 1-514-990-1516. Use format \"498945233886\" for international numbers (Without \"011\") you would dial like this: +49 89 452 33 88-6. In this example \"49\" is the country code of Germany.
   */
  sPhoneNumberCell?: string;
}


/**
 * The signature step of the Ezsigndocument.
 */
export type FieldEEzsigndocumentStep = 'Unsent' | 'Unsigned' | 'PartiallySigned' | 'Completed';

/**
 * Frequency at which reminders will be sent to signers that haven\'t signed the documents
 */
export type FieldEEzsignfolderSendreminderfrequency = 'None' | 'Daily' | 'Weekly';

/**
 * The signature step of the Ezsignfolder.
 */
export type FieldEEzsignfolderStep = 'Unsent' | 'Sent' | 'PartiallySigned' | 'Expired' | 'Signed' | 'Completed' | 'Archived';

/**
 * The type of signature.  1. **Acknowledgement** is for an acknowledgment of receipt. 2. **City** is to request the city where the document is signed. 2. **Handwritten** is for a handwritten kind of signature where users needs to \"draw\" their signature on screen. 3. **Initials** is a simple \"click to add initials\" block. 4. **Name** is a simple \"Click to sign\" block. This is the most common block of signature.
 */
export type FieldEEzsignsignatureType = 'Acknowledgement' | 'City' | 'Handwritten' | 'Initials' | 'Name';

/**
 * The type of phone number.  **Local** refers to a north American phone number. You would then need to specify sPhoneRegion, sPhoneExchange, sPhoneNumber. **International** would be used for numbers outside of north america. You would then need to specify sPhoneInternational
 */
export type FieldEPhoneType = 'Local' | 'International';

/**
 * The user type of the User.
 */
export type FieldEUserType = 'AgentBroker' | 'Assistant' | 'Attendance' | 'Customer' | 'Employee' | 'Ezcom' | 'EzsignSigner' | 'EzsignUser' | 'FranchiseCustomerServer' | 'Normal' | 'RewardAdministration' | 'RewardMember' | 'RewardRepresentative' | 'RewardCustomer' | 'RewardDistributorServer' | 'Supplier' | 'VetrxCustomer' | 'Vetrxcustomergroup' | 'VetrxCustomerServer' | 'VetrxManufacturer' | 'VetrxVendor';

/**
 * The user type of the User for SSPR
 */
export type FieldEUserTypeSSPR = 'EzsignUser' | 'Native';

/**
 * Request for the /1/object/franchisereferalincome/createObject API Request
 */
export interface FranchisereferalincomeCreateObjectV1Request {
  objFranchisereferalincome?: FranchisereferalincomeRequest;
  objFranchisereferalincomeCompound?: FranchisereferalincomeRequestCompound;
}


/**
 * Response for the /1/object/franchisereferalincome/createObject API Request
 */
export interface FranchisereferalincomeCreateObjectV1Response {
  mPayload: FranchisereferalincomeCreateObjectV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/object/franchisereferalincome/createObject API Request
 */
export interface FranchisereferalincomeCreateObjectV1ResponseMPayload {
  /**
   * An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
   */
  a_pkiFranchisereferalincomeID: Array<number>;
}


/**
 * An Franchisereferalincome Object
 */
export interface FranchisereferalincomeRequest {
  /**
   * The unique ID of the Franchisebroker
   */
  fkiFranchisebrokerID: number;
  /**
   * The unique ID of the Franchisereferalincomeprogram
   */
  fkiFranchisereferalincomeprogramID: number;
  /**
   * The unique ID of the Period
   */
  fkiPeriodID: number;
  /**
   * The loan amount
   */
  dFranchisereferalincomeLoan: string;
  /**
   * The amount that will be given to the franchise
   */
  dFranchisereferalincomeFranchiseamount: string;
  /**
   * The amount that will be kept by the franchisor
   */
  dFranchisereferalincomeFranchisoramount: string;
  /**
   * The amount that will be given to the agent
   */
  dFranchisereferalincomeAgentamount: string;
  /**
   * The date the amounts were disbursed
   */
  dtFranchisereferalincomeDisbursed: string;
  /**
   * A comment about the transaction
   */
  tFranchisereferalincomeComment: string;
  /**
   * The unique ID of the Franchisereoffice
   */
  fkiFranchiseofficeID: number;
  sFranchisereferalincomeRemoteid: string;
}


/**
 * A Franchisereferalincome Object and children to create a complete structure
 */
export interface FranchisereferalincomeRequestCompound {
  objAddress?: AddressRequest;
  a_objContact: Array<ContactRequestCompound>;
  /**
   * The unique ID of the Franchisebroker
   */
  fkiFranchisebrokerID: number;
  /**
   * The unique ID of the Franchisereferalincomeprogram
   */
  fkiFranchisereferalincomeprogramID: number;
  /**
   * The unique ID of the Period
   */
  fkiPeriodID: number;
  /**
   * The loan amount
   */
  dFranchisereferalincomeLoan: string;
  /**
   * The amount that will be given to the franchise
   */
  dFranchisereferalincomeFranchiseamount: string;
  /**
   * The amount that will be kept by the franchisor
   */
  dFranchisereferalincomeFranchisoramount: string;
  /**
   * The amount that will be given to the agent
   */
  dFranchisereferalincomeAgentamount: string;
  /**
   * The date the amounts were disbursed
   */
  dtFranchisereferalincomeDisbursed: string;
  /**
   * A comment about the transaction
   */
  tFranchisereferalincomeComment: string;
  /**
   * The unique ID of the Franchisereoffice
   */
  fkiFranchiseofficeID: number;
  sFranchisereferalincomeRemoteid: string;
}


/**
 * Response for the /1/customer/{pksCustomerCode}/endpoint API Request
 */
export interface GlobalCustomerGetEndpointV1Response {
  /**
   * The endpoint\'s URL
   */
  sEndpointURL: string;
}


/**
 * Description of the API Key  
 */
export interface MultilingualApikeyDescription {
  /**
   * Value in French
   */
  sApikeyDescription1?: string;
  /**
   * Value in English
   */
  sApikeyDescription2?: string;
}


/**
 * A Phone Object
 */
export interface PhoneRequest {
  /**
   * The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|
   */
  fkiPhonetypeID: number;
  ePhoneType: FieldEPhoneType;
  /**
   * The region of the phone number. (For a North America Number only)  The region is the \"514\" section in this sample phone number: (514) 990-1516 x123
   */
  sPhoneRegion?: string;
  /**
   * The exchange of the phone number. (For a North America Number only)  The exchange is the \"990\" section in this sample phone number: (514) 990-1516 x123
   */
  sPhoneExchange?: string;
  /**
   * The number of the phone number. (For a North America Number only)  The number is the \"1516\" section in this sample phone number: (514) 990-1516 x123
   */
  sPhoneNumber?: string;
  /**
   * The international phone number. (For phone numbers outside of North)  Do not specify the \"011\" part of the phone number used to dial an international phone number from North America.  For example for this sample phone number \"+442071838750\", you would send \"442071838750\" without the \"+\" sign.
   */
  sPhoneInternational?: string;
  /**
   * The extension of the phone number.  The extension is the \"123\" section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
   */
  sPhoneExtension?: string;
}


/**
 * Request for the /1/module/sspr/resetPasswordRequest API Request
 */
export interface SsprResetPasswordRequestV1Request {
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserTypeSSPR: FieldEUserTypeSSPR;
  /**
   * The email address.
   */
  sEmailAddress?: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname?: string;
}


/**
 * Request for the /1/module/sspr/resetPassword API Request
 */
export interface SsprResetPasswordV1Request {
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserTypeSSPR: FieldEUserTypeSSPR;
  /**
   * The email address.
   */
  sEmailAddress?: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname?: string;
  /**
   * Hex Encoded Secret SSPR token
   */
  binUserSSPRtoken: string;
  /**
   * A Password.  Must meet complexity requirements
   */
  sPassword: string;
}


/**
 * Request for the /1/module/sspr/sendUsernames API Request
 */
export interface SsprSendUsernamesV1Request {
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserTypeSSPR: FieldEUserTypeSSPR;
  /**
   * The email address.
   */
  sEmailAddress: string;
}


/**
 * Request for the /1/module/sspr/unlockAccountRequest API Request
 */
export interface SsprUnlockAccountRequestV1Request {
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserTypeSSPR: FieldEUserTypeSSPR;
  /**
   * The email address.
   */
  sEmailAddress?: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname?: string;
}


/**
 * Request for the /1/module/sspr/unlockAccount API Request
 */
export interface SsprUnlockAccountV1Request {
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserTypeSSPR: FieldEUserTypeSSPR;
  /**
   * The email address.
   */
  sEmailAddress?: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname?: string;
  /**
   * Hex Encoded Secret SSPR token
   */
  binUserSSPRtoken: string;
}


/**
 * Request for the /1/module/sspr/validateToken API Request
 */
export interface SsprValidateTokenV1Request {
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserTypeSSPR: FieldEUserTypeSSPR;
  /**
   * The email address.
   */
  sEmailAddress?: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname?: string;
  /**
   * Hex Encoded Secret SSPR token
   */
  binUserSSPRtoken: string;
}


/**
 * Request for the /1/object/ezsigndocument/editObject API Request
 */
export interface UNUSEDEzsigndocumentEditObjectV1Request {
  objEzsigndocument?: EzsigndocumentRequest;
}


/**
 * Response for the /1/object/ezsigndocument/editObject API Request
 */
export interface UNUSEDEzsigndocumentEditObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Request for the /1/object/ezsignfolder/editObject API Request
 */
export interface UNUSEDEzsignfolderEditObjectV1Request {
  objEzsignfolder?: EzsignfolderRequest;
}


/**
 * Response for the /1/object/ezsignfolder/editObject API Request
 */
export interface UNUSEDEzsignfolderEditObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Request for the /1/object/ezsignfoldersignerassociation/editObject API Request
 */
export interface UNUSEDEzsignfoldersignerassociationEditObjectV1Request {
  objEzsignfoldersignerassociation?: EzsignfoldersignerassociationRequest;
}


/**
 * Response for the /1/object/ezsignfoldersignerassociation/editObject API Request
 */
export interface UNUSEDEzsignfoldersignerassociationEditObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Request for the /1/object/ezsignsignature/editObject API Request
 */
export interface UNUSEDEzsignsignatureEditObjectV1Request {
  objEzsignsignature?: EzsignsignatureRequest;
}


/**
 * Response for the /1/object/ezsignsignature/editObject API Request
 */
export interface UNUSEDEzsignsignatureEditObjectV1Response {
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Request for the /1/module/user/createEzsignuser API Request
 */
export interface UserCreateEzsignuserV1Request {
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  /**
   * The First name of the user
   */
  sUserFirstname: string;
  /**
   * The Last name of the user
   */
  sUserLastname: string;
  /**
   * The email address.
   */
  sEmailAddress: string;
  /**
   * The region of the phone number. (For a North America Number only)  The region is the \"514\" section in this sample phone number: (514) 990-1516 x123
   */
  sPhoneRegion: string;
  /**
   * The exchange of the phone number. (For a North America Number only)  The exchange is the \"990\" section in this sample phone number: (514) 990-1516 x123
   */
  sPhoneExchange: string;
  /**
   * The number of the phone number. (For a North America Number only)  The number is the \"1516\" section in this sample phone number: (514) 990-1516 x123
   */
  sPhoneNumber: string;
  /**
   * The extension of the phone number.  The extension is the \"123\" section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
   */
  sPhoneExtension?: string;
}


/**
 * Response for the /1/module/user/createEzsignuser API Request
 */
export interface UserCreateEzsignuserV1Response {
  mPayload: UserCreateEzsignuserV1ResponseMPayload;
  objDebugPayload?: CommonResponseObjDebugPayload;
  objDebug?: CommonResponseObjDebug;
}


/**
 * Payload for the /1/module/user/createEzsignuser API Request
 */
export interface UserCreateEzsignuserV1ResponseMPayload {
  /**
   * An array of email addresses that succeeded.
   */
  a_sEmailAddressSuccess: Array<string>;
  /**
   * An array of email addresses that failed.
   */
  a_sEmailAddressFailure: Array<string>;
}


/**
 * A User Object
 */
export interface UserResponse {
  /**
   * The unique ID of the User
   */
  pkiUserID: number;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserType: FieldEUserType;
  /**
   * The First name of the user
   */
  sUserFirstname: string;
  /**
   * The Last name of the user
   */
  sUserLastname: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname: string;
  objAudit: CommonAudit;
}


export interface UserResponseAllOf {
  /**
   * The unique ID of the User
   */
  pkiUserID: number;
  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   */
  fkiLanguageID: number;
  eUserType: FieldEUserType;
  /**
   * The First name of the user
   */
  sUserFirstname: string;
  /**
   * The Last name of the user
   */
  sUserLastname: string;
  /**
   * The Login name of the User.
   */
  sUserLoginname: string;
  objAudit: CommonAudit;
}


/**
 * This is the base Webhook object
 */
export interface WebhookEzsignDocumentCompleted {
  objEzsigndocument: EzsigndocumentResponse;
  objWebhook: WebhookResponse;
  /**
   * An array containing details of previous attempts that were made to deliver the message. The array is empty if it\'s the first attempt.
   */
  a_objAttempt: Array<AttemptResponse>;
}


export interface WebhookEzsignDocumentCompletedAllOf {
  objEzsigndocument: EzsigndocumentResponse;
}


/**
 * This is the base Webhook object
 */
export interface WebhookEzsignFolderCompleted {
  objEzsignfolder: EzsignfolderResponse;
  objWebhook: WebhookResponse;
  /**
   * An array containing details of previous attempts that were made to deliver the message. The array is empty if it\'s the first attempt.
   */
  a_objAttempt: Array<AttemptResponse>;
}


export interface WebhookEzsignFolderCompletedAllOf {
  objEzsignfolder: EzsignfolderResponse;
}


/**
 * A webhook object
 */
export interface WebhookResponse {
  /**
   * The Webhook ID. This value is visible in the admin interface.
   */
  pkiWebhookID: number;
  /**
   * The Module generating the Event.
   */
  eWebhookModule: WebhookResponseEWebhookModuleEnum;
  /**
   * This Ezsign Event. This property will be set only if the Module is \"Ezsign\".
   */
  eWebhookEzsignevent?: WebhookResponseEWebhookEzsigneventEnum;
  /**
   * The customer code assigned to your account
   */
  pksCustomerCode: string;
  /**
   * The url being called
   */
  sWebhookUrl: string;
  /**
   * The email that will receive the webhook in case all attempts fail.
   */
  sWebhookEmailfailed: string;
  /**
   * This Management Event. This property will be set only if the Module is \"Management\".
   */
  eWebhookManagementevent?: WebhookResponseEWebhookManagementeventEnum;
}

/**
 * Enum for the eWebhookModule property.
 */
export type WebhookResponseEWebhookModuleEnum = 'Ezsign' | 'Management';

/**
 * Enum for the eWebhookEzsignevent property.
 */
export type WebhookResponseEWebhookEzsigneventEnum = 'DocumentCompleted' | 'FolderCompleted';

/**
 * Enum for the eWebhookManagementevent property.
 */
export type WebhookResponseEWebhookManagementeventEnum = 'UserCreated';


/**
 * This is the base Webhook object
 */
export interface WebhookUserUserCreated {
  objUser: UserResponse;
  objWebhook: WebhookResponse;
  /**
   * An array containing details of previous attempts that were made to deliver the message. The array is empty if it\'s the first attempt.
   */
  a_objAttempt: Array<AttemptResponse>;
}


export interface WebhookUserUserCreatedAllOf {
  objUser: UserResponse;
}


/**
 * A Website Object
 */
export interface WebsiteRequest {
  /**
   * The unique ID of the Websitetype.  Valid values:  |Value|Description| |-|-| |1|Website| |2|Twitter| |3|Facebook| |4|Survey|
   */
  fkiWebsitetypeID: number;
  /**
   * The URL of the website.
   */
  sWebsiteAddress: string;
}

